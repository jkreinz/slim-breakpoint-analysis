// SLiM script for breakpoint analysis with realistic temporal sampling
initialize() {
    initializeSLiMOptions(dimensionality="xy");
    
    initializeMutationRate(5e-6);
    
    // m1 mutation type: neutral
    initializeMutationType("m1", 0.5, "f", 0.0);
    
    // m2 mutation type: beneficial - exponential distribution centred on 0.05, recessive (h=0.15)
    initializeMutationType("m2", 0.15, "e", 0.025);
    m2.convertToSubstitution = F;
    initializeGenomicElementType("g1", c(m1,m2), c(1.0,0.01));
    
    // uniform chromosome of length 100 kb with uniform recombination
    initializeGenomicElement(g1, 0, 99999);
    initializeRecombinationRate(0.000023);
    
    // Get iteration number from command line (default to 1 if not provided)
    if (exists("slimgui")) {
        defineConstant("ITER", 1);
    } else {
        // ITER will be defined via -d flag from command line, default to 1
        if (!exists("ITER")) {
            defineConstant("ITER", 1);
        }
    }
    
    // Create output directory path
    defineConstant("OUTPUT_DIR", "simulation_outputs_recessive/iteration_" + ITER + "/");
    
    // Create the directory (this will be done by the shell script)
    // SLiM doesn't have built-in directory creation, so we rely on the shell script
}

// create a population of 5000 individuals
1 late() {
    sim.addSubpop("p1", 5000);
    
    // initial positions are random in ([0,1], [0,1])
    p1.individuals.x = runif(p1.individualCount);
    p1.individuals.y = runif(p1.individualCount);
}

//generate spatial position for the offspring individual
modifyChild() {
    // draw a child position near the first parent, within bounds
    do child.x = parent1.x + rnorm(1, 0, 0.02);
    while ((child.x < 0.0) | (child.x > 1.0));
    
    do child.y = parent1.y + rnorm(1, 0, 0.02);
    while ((child.y < 0.0) | (child.y > 1.0));
    
    return T;
}

// Period 1: Neutral evolution (generations 1-2000)
1:2000 mutationEffect(m2, p1) { 
    return 1.0; 
}

// Period 2: Positive selection (generations 2000-2050)
2000:2050 mutationEffect(m2, p1) {
    if (homozygous)
        return 1.0 + mut.selectionCoeff * 2;  // positive selection centered around s = 0.05
    else
        return 1.0 + (mut.selectionCoeff * 2) * 0.15;  // recessive dominance (h=0.15)
}

// Period 3: Negative selection (generations2051:2080) 
2051:2100 mutationEffect(m2, p1) {
    effectiveS = mut.selectionCoeff * 1.0;
    if (homozygous)
        return 1.0 - effectiveS;  // negative selection (target: -0.025)
    else
        return 1.0 - effectiveS * 0.15;  // recessive dominance for costs (h=0.15)
}

// Period 4: Positive selection again (generations 2081:2141)
2101:2141 mutationEffect(m2, p1) {
    effectiveS = mut.selectionCoeff * 4.0;
    if (homozygous)
        return 1.0 + effectiveS; // strong positive selection (target: +0.1)
    else
        return 1.0 + effectiveS * 0.15;  // recessive dominance (h=0.15)
}

// Realistic herbarium-like temporal sampling (exactly 200 total individuals)
// Reduced early sampling to reflect historical scarcity
// Early period: very sparse sampling (20 samples across 10 timepoints)
2000 late() { p1.outputVCFSample(1, filePath=OUTPUT_DIR + "t000_sample_h15_n200.vcf"); }
2004 late() { p1.outputVCFSample(1, filePath=OUTPUT_DIR + "t004_sample_h15_n200.vcf"); }
2008 late() { p1.outputVCFSample(2, filePath=OUTPUT_DIR + "t008_sample_h15_n200.vcf"); }
2012 late() { p1.outputVCFSample(2, filePath=OUTPUT_DIR + "t012_sample_h15_n200.vcf"); }
2016 late() { p1.outputVCFSample(2, filePath=OUTPUT_DIR + "t016_sample_h15_n200.vcf"); }
2020 late() { p1.outputVCFSample(2, filePath=OUTPUT_DIR + "t020_sample_h15_n200.vcf"); }
2024 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t024_sample_h15_n200.vcf"); }
2028 late() { p1.outputVCFSample(2, filePath=OUTPUT_DIR + "t028_sample_h15_n200.vcf"); }
2032 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t032_sample_h15_n200.vcf"); }
2036 late() { p1.outputVCFSample(2, filePath=OUTPUT_DIR + "t036_sample_h15_n200.vcf"); }

// Mid period: moderate sampling with good spread (70 samples across 25 timepoints)
2038 late() { p1.outputVCFSample(2, filePath=OUTPUT_DIR + "t038_samplee_h15_n200.vcf"); }
2040 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t040_samplee_h15_n200.vcf"); }
2042 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t042_samplee_h15_n200.vcf"); }
2044 late() { p1.outputVCFSample(2, filePath=OUTPUT_DIR + "t044_samplee_h15_n200.vcf"); }
2046 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t046_samplee_h15_n200.vcf"); }
2048 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t048_samplee_h15_n200.vcf"); }
2050 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t050_samplee_h15_n200.vcf"); }
2052 late() { p1.outputVCFSample(2, filePath=OUTPUT_DIR + "t052_samplee_h15_n200.vcf"); }
2054 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t054_samplee_h15_n200.vcf"); }
2056 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t056_samplee_h15_n200.vcf"); }
2058 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t058_samplee_h15_n200.vcf"); }
2060 late() { p1.outputVCFSample(2, filePath=OUTPUT_DIR + "t060_samplee_h15_n200.vcf"); }
2062 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t062_samplee_h15_n200.vcf"); }
2064 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t064_samplee_h15_n200.vcf"); }
2066 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t066_samplee_h15_n200.vcf"); }
2068 late() { p1.outputVCFSample(2, filePath=OUTPUT_DIR + "t068_samplee_h15_n200.vcf"); }
2070 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t070_samplee_h15_n200.vcf"); }
2072 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t072_samplee_h15_n200.vcf"); }
2074 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t074_samplee_h15_n200.vcf"); }
2076 late() { p1.outputVCFSample(2, filePath=OUTPUT_DIR + "t076_samplee_h15_n200.vcf"); }
2078 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t078_samplee_h15_n200.vcf"); }
2080 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t080_samplee_h15_n200.vcf"); }
2082 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t082_samplee_h15_n200.vcf"); }
2084 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t084_samplee_h15_n200.vcf"); }
2086 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t086_samplee_h15_n200.vcf"); }

// Later period: higher density (70 samples across 20 timepoints)
2088 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t088_samplee_h15_n200.vcf"); }
2090 late() { p1.outputVCFSample(4, filePath=OUTPUT_DIR + "t090_samplee_h15_n200.vcf"); }
2092 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t092_samplee_h15_n200.vcf"); }
2094 late() { p1.outputVCFSample(4, filePath=OUTPUT_DIR + "t094_samplee_h15_n200.vcf"); }
2096 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t096_samplee_h15_n200.vcf"); }
2098 late() { p1.outputVCFSample(4, filePath=OUTPUT_DIR + "t098_samplee_h15_n200.vcf"); }
2100 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t100_samplee_h15_n200.vcf"); }
2102 late() { p1.outputVCFSample(4, filePath=OUTPUT_DIR + "t102_samplee_h15_n200.vcf"); }
2104 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t104_samplee_h15_n200.vcf"); }
2106 late() { p1.outputVCFSample(4, filePath=OUTPUT_DIR + "t106_samplee_h15_n200.vcf"); }
2108 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t108_samplee_h15_n200.vcf"); }
2110 late() { p1.outputVCFSample(4, filePath=OUTPUT_DIR + "t110_samplee_h15_n200.vcf"); }
2112 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t112_samplee_h15_n200.vcf"); }
2114 late() { p1.outputVCFSample(4, filePath=OUTPUT_DIR + "t114_samplee_h15_n200.vcf"); }
2116 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t116_samplee_h15_n200.vcf"); }
2118 late() { p1.outputVCFSample(4, filePath=OUTPUT_DIR + "t118_samplee_h15_n200.vcf"); }
2120 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t120_samplee_h15_n200.vcf"); }
2122 late() { p1.outputVCFSample(4, filePath=OUTPUT_DIR + "t122_samplee_h15_n200.vcf"); }
2124 late() { p1.outputVCFSample(3, filePath=OUTPUT_DIR + "t124_samplee_h15_n200.vcf"); }
2126 late() { p1.outputVCFSample(4, filePath=OUTPUT_DIR + "t126_samplee_h15_n200.vcf"); }

// Recent period: intensive but not extreme (40 samples across 10 timepoints)
2128 late() { p1.outputVCFSample(4, filePath=OUTPUT_DIR + "t128_samplee_h15_n200.vcf"); }
2130 late() { p1.outputVCFSample(4, filePath=OUTPUT_DIR + "t130_samplee_h15_n200.vcf"); }
2132 late() { p1.outputVCFSample(4, filePath=OUTPUT_DIR + "t132_samplee_h15_n200.vcf"); }
2134 late() { p1.outputVCFSample(4, filePath=OUTPUT_DIR + "t134_samplee_h15_n200.vcf"); }
2136 late() { p1.outputVCFSample(4, filePath=OUTPUT_DIR + "t136_samplee_h15_n200.vcf"); }
2138 late() { p1.outputVCFSample(4, filePath=OUTPUT_DIR + "t138_samplee_h15_n200.vcf"); }
2140 late() { p1.outputVCFSample(4, filePath=OUTPUT_DIR + "t140_samplee_h15_n200.vcf"); }
2141 late() { p1.outputVCFSample(4, filePath=OUTPUT_DIR + "t141_samplee_h15_n200.vcf"); }
2139 late() { p1.outputVCFSample(4, filePath=OUTPUT_DIR + "t139_samplee_h15_n200.vcf"); }
2137 late() { p1.outputVCFSample(4, filePath=OUTPUT_DIR + "t137_samplee_h15_n200.vcf"); }
e_h15_n200